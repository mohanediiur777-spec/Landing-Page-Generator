#!/usr/bin/env python3
"""
Landing Page Factory - Permanent Solution for HTML Editing Nightmares
Generates perfect landing pages from simple configuration files
"""

import os
import yaml
from datetime import datetime
from pathlib import Path

class LandingPageFactory:
    def __init__(self):
        self.components = self._load_components()
        self.templates = self._load_templates()
    
    def _load_components(self):
        """Load all component classes"""
        return {
            # Core Structure
            'hero': HeroComponent,
            'header': HeaderComponent,
            'footer': FooterComponent,
            
            # Interactive Elements
            'calculator': CalculatorComponent,
            'animated_cycle': AnimatedCycleComponent,
            'before_after_slider': BeforeAfterSliderComponent,
            'product_slider': ProductSliderComponent,
            
            # Content Blocks
            'strategic_proposal': StrategicProposalComponent,
            'value_proposition': ValuePropComponent,
            'product_showcase': ProductShowcaseComponent,
            'timeline_roadmap': TimelineComponent,
            
            # Market Analysis (Shell Helix)
            'market_analysis': MarketAnalysisComponent,
            'executive_summary': ExecutiveSummaryComponent,
            'competitor_analysis': CompetitorAnalysisComponent,
            'data_visualization': DataVizComponent,
            'regulatory_compliance': RegulatoryComponent,
            
            # Contact
            'contact_form': ContactComponent
        }
    
    def generate_page(self, config_file):
        """Generate perfect landing page from config file"""
        config = self._load_config(config_file)
        
        # Build sections
        sections_html = []
        for section_config in config['sections']:
            component_type = section_config['type']
            if component_type in self.components:
                component = self.components[component_type]()
                sections_html.append(component.render(section_config))
        
        # Wrap in master template
        full_html = self._wrap_template(
            sections_html, 
            config['metadata'],
            config.get('styles', {})
        )
        
        # Save output
        output_file = self._save_output(full_html, config['metadata']['client_name'])
        return output_file
    
    def _load_config(self, config_file):
        """Load YAML configuration"""
        with open(config_file, 'r', encoding='utf-8') as file:
            return yaml.safe_load(file)
    
    def _wrap_template(self, sections_html, metadata, styles):
        """Wrap sections in master HTML template"""
        return f"""
<!DOCTYPE html>
<html lang="{metadata.get('language', 'en')}" dir="{metadata.get('direction', 'ltr')}">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{metadata.get('title', 'Landing Page')}</title>
    
    <!-- Generated by Landing Page Factory -->
    <meta name="generator" content="LPF v1.0">
    
    {self._generate_styles(styles, metadata)}
</head>
<body class="{metadata.get('theme', 'default')}">
    {"".join(sections_html)}
    
    {self._generate_scripts()}
</body>
</html>
        """
    
    def _generate_styles(self, styles, metadata):
        """Generate CSS based on brand styles"""
        primary_color = styles.get('primary_color', '#0A2E5E')
        secondary_color = styles.get('secondary_color', '#FFD700')
        
        return f"""
    <style>
        :root {{
            --primary-color: {primary_color};
            --secondary-color: {secondary_color};
            --font-arabic: 'Amiri', serif;
            --font-english: 'Inter', sans-serif;
        }}
        
        /* Your perfect spacing and layouts built-in */
        .container {{ max-width: 1200px; margin: 0 auto; padding: 2rem; }}
        .section {{ padding: 4rem 0; }}
        .animate-on-scroll {{ opacity: 0; transform: translateY(30px); transition: all 0.6s ease; }}
        .animate-on-scroll.visible {{ opacity: 1; transform: translateY(0); }}
    </style>
    
    <!-- Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Amiri:wght@400;700&family=Inter:wght@300;400;600;700&display=swap" rel="stylesheet">
        """
    
    def _generate_scripts(self):
        """Generate standard JavaScript"""
        return """
    <script>
        // Scroll animations
        document.addEventListener('DOMContentLoaded', function() {
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('visible');
                    }
                });
            }, { threshold: 0.1 });
            
            document.querySelectorAll('.animate-on-scroll').forEach(el => {
                observer.observe(el);
            });
        });
    </script>
        """
    
    def _save_output(self, html_content, client_name):
        """Save generated HTML to file"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"output/{client_name.replace(' ', '_')}_{timestamp}.html"
        
        os.makedirs('output', exist_ok=True)
        with open(filename, 'w', encoding='utf-8') as file:
            file.write(html_content)
        
        print(f"✅ Generated: {filename}")
        return filename


# ============================================================================
# COMPONENT DEFINITIONS
# ============================================================================

class BaseComponent:
    """Base class for all components"""
    def render(self, config):
        raise NotImplementedError("Components must implement render method")


class HeroComponent(BaseComponent):
    def render(self, config):
        headline_en = config.get('headline_en', '')
        headline_ar = config.get('headline_ar', '')
        background_image = config.get('background_image', '')
        
        return f"""
        <section class="hero section animate-on-scroll">
            <div class="hero-background" style="background-image: url('{background_image}')"></div>
            <div class="container">
                <h1 data-lang-en="{headline_en}" data-lang-ar="{headline_ar}">
                    {headline_en}
                </h1>
                <p class="tagline" data-lang-en="{config.get('tagline_en', '')}" data-lang-ar="{config.get('tagline_ar', '')}">
                    {config.get('tagline_en', '')}
                </p>
            </div>
        </section>
        """


class MarketAnalysisComponent(BaseComponent):
    def render(self, config):
        return f"""
        <section class="market-analysis section animate-on-scroll">
            <div class="container">
                <h2 class="font-arabic">{config.get('title', 'دراسة السوق')}</h2>
                <p class="font-arabic subtitle">{config.get('subtitle', '')}</p>
                
                <div class="executive-summary">
                    {self._render_data_points(config.get('data_points', []))}
                </div>
            </div>
        </section>
        """
    
    def _render_data_points(self, data_points):
        points_html = []
        for point in data_points:
            points_html.append(f"""
                <div class="data-point bg-{point.get('color', 'blue')}-500">
                    <div class="value">{point['value']}</div>
                    <div class="label font-arabic">{point['label']}</div>
                </div>
            """)
        return "".join(points_html)


class AnimatedCycleComponent(BaseComponent):
    def render(self, config):
        center_text = config.get('center_text', 'Core Objective')
        steps = config.get('steps', [])
        
        steps_html = "".join([
            f'<div class="cycle-step step-{i+1}">{step}</div>'
            for i, step in enumerate(steps)
        ])
        
        return f"""
        <section class="animated-cycle section animate-on-scroll">
            <div class="container">
                <div class="cycle-container">
                    <div class="center-core">{center_text}</div>
                    {steps_html}
                </div>
            </div>
        </section>
        """


class StrategicProposalComponent(BaseComponent):
    def render(self, config):
        statements = config.get('statements', [])
        
        statements_html = "".join([
            f'<li data-lang-en="{stmt.get("en", "")}" data-lang-ar="{stmt.get("ar", "")}">{stmt.get("en", "")}</li>'
            for stmt in statements
        ])
        
        return f"""
        <section class="strategic-proposal section animate-on-scroll">
            <div class="container">
                <h2 data-lang-en="{config.get('title_en', 'Strategic Proposal')}" 
                    data-lang-ar="{config.get('title_ar', 'مقترح استراتيجي')}">
                    {config.get('title_en', 'Strategic Proposal')}
                </h2>
                <ul class="geo-marketing-list">
                    {statements_html}
                </ul>
            </div>
        </section>
        """


class CalculatorComponent(BaseComponent):
    def render(self, config):
        return """
        <section class="calculator section animate-on-scroll">
            <div class="container">
                <h2>Savings Calculator</h2>
                <div class="calculator-grid">
                    <div class="input-section">
                        <label>Annual Distance (km)</label>
                        <input type="number" id="distance" value="20000">
                    </div>
                    <div class="results-section">
                        <div class="result" id="savings">EGP 0</div>
                        <div class="result" id="roi">0 months</div>
                    </div>
                </div>
            </div>
        </section>
        """


# Add more components as needed...

# ============================================================================
# USAGE AND EXAMPLES
# ============================================================================

def main():
    factory = LandingPageFactory()
    
    # Example: Generate OLA Energy page
    ola_output = factory.generate_page('configs/ola_energy.yaml')
    
    # Example: Generate Shell Helix page  
    shell_output = factory.generate_page('configs/shell_helix.yaml')
    
    print("🎉 Landing pages generated successfully!")
    print(f"📁 OLA: {ola_output}")
    print(f"📁 Shell: {shell_output}")

if __name__ == "__main__":
    main()
